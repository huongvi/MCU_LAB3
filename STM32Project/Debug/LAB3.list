
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c70  08002c70  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c70  08002c70  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c70  08002c70  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000006c  08002ce4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002ce4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000951c  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be4  00000000  00000000  000295b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002bbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ea8  00000000  00000000  0002c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000befb  00000000  00000000  000433e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008215e  00000000  00000000  0004f2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002874  00000000  00000000  000d1494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c38 	.word	0x08002c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002c38 	.word	0x08002c38

0800014c <displayLED1>:
 *      Author: Admin
 */

#include "LED.h"

void displayLED1(int ledStatus1){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	3b04      	subs	r3, #4
 8000158:	2b03      	cmp	r3, #3
 800015a:	d84b      	bhi.n	80001f4 <displayLED1+0xa8>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <displayLED1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000195 	.word	0x08000195
 8000168:	080001b5 	.word	0x080001b5
 800016c:	080001d5 	.word	0x080001d5
 8000170:	08000175 	.word	0x08000175
	switch (ledStatus1){
	case LED_INIT:
		  HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8000174:	2200      	movs	r2, #0
 8000176:	2120      	movs	r1, #32
 8000178:	4821      	ldr	r0, [pc, #132]	; (8000200 <displayLED1+0xb4>)
 800017a:	f001 fd34 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2140      	movs	r1, #64	; 0x40
 8000182:	481f      	ldr	r0, [pc, #124]	; (8000200 <displayLED1+0xb4>)
 8000184:	f001 fd2f 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 8000188:	2200      	movs	r2, #0
 800018a:	2180      	movs	r1, #128	; 0x80
 800018c:	481c      	ldr	r0, [pc, #112]	; (8000200 <displayLED1+0xb4>)
 800018e:	f001 fd2a 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 8000192:	e030      	b.n	80001f6 <displayLED1+0xaa>
	case RED:
		  HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8000194:	2200      	movs	r2, #0
 8000196:	2120      	movs	r1, #32
 8000198:	4819      	ldr	r0, [pc, #100]	; (8000200 <displayLED1+0xb4>)
 800019a:	f001 fd24 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 800019e:	2201      	movs	r2, #1
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4817      	ldr	r0, [pc, #92]	; (8000200 <displayLED1+0xb4>)
 80001a4:	f001 fd1f 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2180      	movs	r1, #128	; 0x80
 80001ac:	4814      	ldr	r0, [pc, #80]	; (8000200 <displayLED1+0xb4>)
 80001ae:	f001 fd1a 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 80001b2:	e020      	b.n	80001f6 <displayLED1+0xaa>
	case YELLOW:
		  HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2120      	movs	r1, #32
 80001b8:	4811      	ldr	r0, [pc, #68]	; (8000200 <displayLED1+0xb4>)
 80001ba:	f001 fd14 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	2140      	movs	r1, #64	; 0x40
 80001c2:	480f      	ldr	r0, [pc, #60]	; (8000200 <displayLED1+0xb4>)
 80001c4:	f001 fd0f 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	480c      	ldr	r0, [pc, #48]	; (8000200 <displayLED1+0xb4>)
 80001ce:	f001 fd0a 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 80001d2:	e010      	b.n	80001f6 <displayLED1+0xaa>
	case GREEN:
		  HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2120      	movs	r1, #32
 80001d8:	4809      	ldr	r0, [pc, #36]	; (8000200 <displayLED1+0xb4>)
 80001da:	f001 fd04 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	2140      	movs	r1, #64	; 0x40
 80001e2:	4807      	ldr	r0, [pc, #28]	; (8000200 <displayLED1+0xb4>)
 80001e4:	f001 fcff 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <displayLED1+0xb4>)
 80001ee:	f001 fcfa 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 80001f2:	e000      	b.n	80001f6 <displayLED1+0xaa>
	default:
		break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40010800 	.word	0x40010800

08000204 <displayLED2>:

void displayLED2(int ledStatus2){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3b04      	subs	r3, #4
 8000210:	2b03      	cmp	r3, #3
 8000212:	d84b      	bhi.n	80002ac <displayLED2+0xa8>
 8000214:	a201      	add	r2, pc, #4	; (adr r2, 800021c <displayLED2+0x18>)
 8000216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021a:	bf00      	nop
 800021c:	0800024d 	.word	0x0800024d
 8000220:	0800026d 	.word	0x0800026d
 8000224:	0800028d 	.word	0x0800028d
 8000228:	0800022d 	.word	0x0800022d
	switch (ledStatus2){
	case LED_INIT:
		  HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2120      	movs	r1, #32
 8000230:	4821      	ldr	r0, [pc, #132]	; (80002b8 <displayLED2+0xb4>)
 8000232:	f001 fcd8 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	481f      	ldr	r0, [pc, #124]	; (80002b8 <displayLED2+0xb4>)
 800023c:	f001 fcd3 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2180      	movs	r1, #128	; 0x80
 8000244:	481c      	ldr	r0, [pc, #112]	; (80002b8 <displayLED2+0xb4>)
 8000246:	f001 fcce 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 800024a:	e030      	b.n	80002ae <displayLED2+0xaa>
	case RED:
		  HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2120      	movs	r1, #32
 8000250:	4819      	ldr	r0, [pc, #100]	; (80002b8 <displayLED2+0xb4>)
 8000252:	f001 fcc8 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	2140      	movs	r1, #64	; 0x40
 800025a:	4817      	ldr	r0, [pc, #92]	; (80002b8 <displayLED2+0xb4>)
 800025c:	f001 fcc3 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	4814      	ldr	r0, [pc, #80]	; (80002b8 <displayLED2+0xb4>)
 8000266:	f001 fcbe 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 800026a:	e020      	b.n	80002ae <displayLED2+0xaa>
	case YELLOW:
		  HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800026c:	2201      	movs	r2, #1
 800026e:	2120      	movs	r1, #32
 8000270:	4811      	ldr	r0, [pc, #68]	; (80002b8 <displayLED2+0xb4>)
 8000272:	f001 fcb8 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2140      	movs	r1, #64	; 0x40
 800027a:	480f      	ldr	r0, [pc, #60]	; (80002b8 <displayLED2+0xb4>)
 800027c:	f001 fcb3 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <displayLED2+0xb4>)
 8000286:	f001 fcae 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 800028a:	e010      	b.n	80002ae <displayLED2+0xaa>
	case GREEN:
		  HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	2120      	movs	r1, #32
 8000290:	4809      	ldr	r0, [pc, #36]	; (80002b8 <displayLED2+0xb4>)
 8000292:	f001 fca8 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	4807      	ldr	r0, [pc, #28]	; (80002b8 <displayLED2+0xb4>)
 800029c:	f001 fca3 	bl	8001be6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <displayLED2+0xb4>)
 80002a6:	f001 fc9e 	bl	8001be6 <HAL_GPIO_WritePin>
		  break;
 80002aa:	e000      	b.n	80002ae <displayLED2+0xaa>
	default:
		break;
 80002ac:	bf00      	nop
	}
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010c00 	.word	0x40010c00

080002bc <display7SEG>:
 *      Author: Admin
 */

#include "LED7seg.h"

void display7SEG(int count){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b09      	cmp	r3, #9
 80002c8:	f200 8194 	bhi.w	80005f4 <display7SEG+0x338>
 80002cc:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <display7SEG+0x18>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	080002fd 	.word	0x080002fd
 80002d8:	08000349 	.word	0x08000349
 80002dc:	08000395 	.word	0x08000395
 80002e0:	080003e1 	.word	0x080003e1
 80002e4:	0800042d 	.word	0x0800042d
 80002e8:	08000479 	.word	0x08000479
 80002ec:	080004c5 	.word	0x080004c5
 80002f0:	08000511 	.word	0x08000511
 80002f4:	0800055d 	.word	0x0800055d
 80002f8:	080005a9 	.word	0x080005a9
	switch (count){
	case 0:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	48d1      	ldr	r0, [pc, #836]	; (8000648 <display7SEG+0x38c>)
 8000302:	f001 fc70 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2102      	movs	r1, #2
 800030a:	48cf      	ldr	r0, [pc, #828]	; (8000648 <display7SEG+0x38c>)
 800030c:	f001 fc6b 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2104      	movs	r1, #4
 8000314:	48cc      	ldr	r0, [pc, #816]	; (8000648 <display7SEG+0x38c>)
 8000316:	f001 fc66 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2108      	movs	r1, #8
 800031e:	48ca      	ldr	r0, [pc, #808]	; (8000648 <display7SEG+0x38c>)
 8000320:	f001 fc61 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	2110      	movs	r1, #16
 8000328:	48c7      	ldr	r0, [pc, #796]	; (8000648 <display7SEG+0x38c>)
 800032a:	f001 fc5c 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000334:	48c4      	ldr	r0, [pc, #784]	; (8000648 <display7SEG+0x38c>)
 8000336:	f001 fc56 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000340:	48c1      	ldr	r0, [pc, #772]	; (8000648 <display7SEG+0x38c>)
 8000342:	f001 fc50 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 8000346:	e17b      	b.n	8000640 <display7SEG+0x384>
	case 1:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 8000348:	2201      	movs	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	48be      	ldr	r0, [pc, #760]	; (8000648 <display7SEG+0x38c>)
 800034e:	f001 fc4a 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	48bc      	ldr	r0, [pc, #752]	; (8000648 <display7SEG+0x38c>)
 8000358:	f001 fc45 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	48b9      	ldr	r0, [pc, #740]	; (8000648 <display7SEG+0x38c>)
 8000362:	f001 fc40 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	2108      	movs	r1, #8
 800036a:	48b7      	ldr	r0, [pc, #732]	; (8000648 <display7SEG+0x38c>)
 800036c:	f001 fc3b 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	2110      	movs	r1, #16
 8000374:	48b4      	ldr	r0, [pc, #720]	; (8000648 <display7SEG+0x38c>)
 8000376:	f001 fc36 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000380:	48b1      	ldr	r0, [pc, #708]	; (8000648 <display7SEG+0x38c>)
 8000382:	f001 fc30 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038c:	48ae      	ldr	r0, [pc, #696]	; (8000648 <display7SEG+0x38c>)
 800038e:	f001 fc2a 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 8000392:	e155      	b.n	8000640 <display7SEG+0x384>
	case 2:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	48ab      	ldr	r0, [pc, #684]	; (8000648 <display7SEG+0x38c>)
 800039a:	f001 fc24 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2102      	movs	r1, #2
 80003a2:	48a9      	ldr	r0, [pc, #676]	; (8000648 <display7SEG+0x38c>)
 80003a4:	f001 fc1f 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2104      	movs	r1, #4
 80003ac:	48a6      	ldr	r0, [pc, #664]	; (8000648 <display7SEG+0x38c>)
 80003ae:	f001 fc1a 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2108      	movs	r1, #8
 80003b6:	48a4      	ldr	r0, [pc, #656]	; (8000648 <display7SEG+0x38c>)
 80003b8:	f001 fc15 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2110      	movs	r1, #16
 80003c0:	48a1      	ldr	r0, [pc, #644]	; (8000648 <display7SEG+0x38c>)
 80003c2:	f001 fc10 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003cc:	489e      	ldr	r0, [pc, #632]	; (8000648 <display7SEG+0x38c>)
 80003ce:	f001 fc0a 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d8:	489b      	ldr	r0, [pc, #620]	; (8000648 <display7SEG+0x38c>)
 80003da:	f001 fc04 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 80003de:	e12f      	b.n	8000640 <display7SEG+0x384>
	case 3:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	4898      	ldr	r0, [pc, #608]	; (8000648 <display7SEG+0x38c>)
 80003e6:	f001 fbfe 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2102      	movs	r1, #2
 80003ee:	4896      	ldr	r0, [pc, #600]	; (8000648 <display7SEG+0x38c>)
 80003f0:	f001 fbf9 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	4893      	ldr	r0, [pc, #588]	; (8000648 <display7SEG+0x38c>)
 80003fa:	f001 fbf4 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	4891      	ldr	r0, [pc, #580]	; (8000648 <display7SEG+0x38c>)
 8000404:	f001 fbef 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	488e      	ldr	r0, [pc, #568]	; (8000648 <display7SEG+0x38c>)
 800040e:	f001 fbea 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	488b      	ldr	r0, [pc, #556]	; (8000648 <display7SEG+0x38c>)
 800041a:	f001 fbe4 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000424:	4888      	ldr	r0, [pc, #544]	; (8000648 <display7SEG+0x38c>)
 8000426:	f001 fbde 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 800042a:	e109      	b.n	8000640 <display7SEG+0x384>
	case 4:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	2101      	movs	r1, #1
 8000430:	4885      	ldr	r0, [pc, #532]	; (8000648 <display7SEG+0x38c>)
 8000432:	f001 fbd8 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2102      	movs	r1, #2
 800043a:	4883      	ldr	r0, [pc, #524]	; (8000648 <display7SEG+0x38c>)
 800043c:	f001 fbd3 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	4880      	ldr	r0, [pc, #512]	; (8000648 <display7SEG+0x38c>)
 8000446:	f001 fbce 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 800044a:	2201      	movs	r2, #1
 800044c:	2108      	movs	r1, #8
 800044e:	487e      	ldr	r0, [pc, #504]	; (8000648 <display7SEG+0x38c>)
 8000450:	f001 fbc9 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	2110      	movs	r1, #16
 8000458:	487b      	ldr	r0, [pc, #492]	; (8000648 <display7SEG+0x38c>)
 800045a:	f001 fbc4 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	4878      	ldr	r0, [pc, #480]	; (8000648 <display7SEG+0x38c>)
 8000466:	f001 fbbe 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000470:	4875      	ldr	r0, [pc, #468]	; (8000648 <display7SEG+0x38c>)
 8000472:	f001 fbb8 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 8000476:	e0e3      	b.n	8000640 <display7SEG+0x384>
	case 5:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2101      	movs	r1, #1
 800047c:	4872      	ldr	r0, [pc, #456]	; (8000648 <display7SEG+0x38c>)
 800047e:	f001 fbb2 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 8000482:	2201      	movs	r2, #1
 8000484:	2102      	movs	r1, #2
 8000486:	4870      	ldr	r0, [pc, #448]	; (8000648 <display7SEG+0x38c>)
 8000488:	f001 fbad 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2104      	movs	r1, #4
 8000490:	486d      	ldr	r0, [pc, #436]	; (8000648 <display7SEG+0x38c>)
 8000492:	f001 fba8 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2108      	movs	r1, #8
 800049a:	486b      	ldr	r0, [pc, #428]	; (8000648 <display7SEG+0x38c>)
 800049c:	f001 fba3 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2110      	movs	r1, #16
 80004a4:	4868      	ldr	r0, [pc, #416]	; (8000648 <display7SEG+0x38c>)
 80004a6:	f001 fb9e 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b0:	4865      	ldr	r0, [pc, #404]	; (8000648 <display7SEG+0x38c>)
 80004b2:	f001 fb98 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004bc:	4862      	ldr	r0, [pc, #392]	; (8000648 <display7SEG+0x38c>)
 80004be:	f001 fb92 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 80004c2:	e0bd      	b.n	8000640 <display7SEG+0x384>
	case 6:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2101      	movs	r1, #1
 80004c8:	485f      	ldr	r0, [pc, #380]	; (8000648 <display7SEG+0x38c>)
 80004ca:	f001 fb8c 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2102      	movs	r1, #2
 80004d2:	485d      	ldr	r0, [pc, #372]	; (8000648 <display7SEG+0x38c>)
 80004d4:	f001 fb87 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2104      	movs	r1, #4
 80004dc:	485a      	ldr	r0, [pc, #360]	; (8000648 <display7SEG+0x38c>)
 80004de:	f001 fb82 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	4858      	ldr	r0, [pc, #352]	; (8000648 <display7SEG+0x38c>)
 80004e8:	f001 fb7d 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	4855      	ldr	r0, [pc, #340]	; (8000648 <display7SEG+0x38c>)
 80004f2:	f001 fb78 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fc:	4852      	ldr	r0, [pc, #328]	; (8000648 <display7SEG+0x38c>)
 80004fe:	f001 fb72 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000508:	484f      	ldr	r0, [pc, #316]	; (8000648 <display7SEG+0x38c>)
 800050a:	f001 fb6c 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 800050e:	e097      	b.n	8000640 <display7SEG+0x384>
	case 7:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2101      	movs	r1, #1
 8000514:	484c      	ldr	r0, [pc, #304]	; (8000648 <display7SEG+0x38c>)
 8000516:	f001 fb66 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2102      	movs	r1, #2
 800051e:	484a      	ldr	r0, [pc, #296]	; (8000648 <display7SEG+0x38c>)
 8000520:	f001 fb61 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	4847      	ldr	r0, [pc, #284]	; (8000648 <display7SEG+0x38c>)
 800052a:	f001 fb5c 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2108      	movs	r1, #8
 8000532:	4845      	ldr	r0, [pc, #276]	; (8000648 <display7SEG+0x38c>)
 8000534:	f001 fb57 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2110      	movs	r1, #16
 800053c:	4842      	ldr	r0, [pc, #264]	; (8000648 <display7SEG+0x38c>)
 800053e:	f001 fb52 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	483f      	ldr	r0, [pc, #252]	; (8000648 <display7SEG+0x38c>)
 800054a:	f001 fb4c 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	483c      	ldr	r0, [pc, #240]	; (8000648 <display7SEG+0x38c>)
 8000556:	f001 fb46 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 800055a:	e071      	b.n	8000640 <display7SEG+0x384>
	case 8:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	4839      	ldr	r0, [pc, #228]	; (8000648 <display7SEG+0x38c>)
 8000562:	f001 fb40 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2102      	movs	r1, #2
 800056a:	4837      	ldr	r0, [pc, #220]	; (8000648 <display7SEG+0x38c>)
 800056c:	f001 fb3b 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	4834      	ldr	r0, [pc, #208]	; (8000648 <display7SEG+0x38c>)
 8000576:	f001 fb36 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2108      	movs	r1, #8
 800057e:	4832      	ldr	r0, [pc, #200]	; (8000648 <display7SEG+0x38c>)
 8000580:	f001 fb31 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	482f      	ldr	r0, [pc, #188]	; (8000648 <display7SEG+0x38c>)
 800058a:	f001 fb2c 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	482c      	ldr	r0, [pc, #176]	; (8000648 <display7SEG+0x38c>)
 8000596:	f001 fb26 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	4829      	ldr	r0, [pc, #164]	; (8000648 <display7SEG+0x38c>)
 80005a2:	f001 fb20 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 80005a6:	e04b      	b.n	8000640 <display7SEG+0x384>
	case 9:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2101      	movs	r1, #1
 80005ac:	4826      	ldr	r0, [pc, #152]	; (8000648 <display7SEG+0x38c>)
 80005ae:	f001 fb1a 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	4824      	ldr	r0, [pc, #144]	; (8000648 <display7SEG+0x38c>)
 80005b8:	f001 fb15 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2104      	movs	r1, #4
 80005c0:	4821      	ldr	r0, [pc, #132]	; (8000648 <display7SEG+0x38c>)
 80005c2:	f001 fb10 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2108      	movs	r1, #8
 80005ca:	481f      	ldr	r0, [pc, #124]	; (8000648 <display7SEG+0x38c>)
 80005cc:	f001 fb0b 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	481c      	ldr	r0, [pc, #112]	; (8000648 <display7SEG+0x38c>)
 80005d6:	f001 fb06 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <display7SEG+0x38c>)
 80005e2:	f001 fb00 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <display7SEG+0x38c>)
 80005ee:	f001 fafa 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 80005f2:	e025      	b.n	8000640 <display7SEG+0x384>
	default:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <display7SEG+0x38c>)
 80005fa:	f001 faf4 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	2102      	movs	r1, #2
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <display7SEG+0x38c>)
 8000604:	f001 faef 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	2104      	movs	r1, #4
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <display7SEG+0x38c>)
 800060e:	f001 faea 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <display7SEG+0x38c>)
 8000618:	f001 fae5 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <display7SEG+0x38c>)
 8000622:	f001 fae0 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <display7SEG+0x38c>)
 800062e:	f001 fada 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <display7SEG+0x38c>)
 800063a:	f001 fad4 	bl	8001be6 <HAL_GPIO_WritePin>
	}

}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40010800 	.word	0x40010800

0800064c <display7SEG_en>:

void display7SEG_en(int en_index){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d86e      	bhi.n	8000738 <display7SEG_en+0xec>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <display7SEG_en+0x14>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000671 	.word	0x08000671
 8000664:	080006a3 	.word	0x080006a3
 8000668:	080006d5 	.word	0x080006d5
 800066c:	08000707 	.word	0x08000707
	switch (en_index){
	case 0:
		HAL_GPIO_WritePin(GPIOB, EN0_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000676:	4833      	ldr	r0, [pc, #204]	; (8000744 <display7SEG_en+0xf8>)
 8000678:	f001 fab5 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	4830      	ldr	r0, [pc, #192]	; (8000744 <display7SEG_en+0xf8>)
 8000684:	f001 faaf 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068e:	482d      	ldr	r0, [pc, #180]	; (8000744 <display7SEG_en+0xf8>)
 8000690:	f001 faa9 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <display7SEG_en+0xf8>)
 800069c:	f001 faa3 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 80006a0:	e04b      	b.n	800073a <display7SEG_en+0xee>
	case 1:
		HAL_GPIO_WritePin(GPIOB, EN0_Pin, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	4826      	ldr	r0, [pc, #152]	; (8000744 <display7SEG_en+0xf8>)
 80006aa:	f001 fa9c 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	4823      	ldr	r0, [pc, #140]	; (8000744 <display7SEG_en+0xf8>)
 80006b6:	f001 fa96 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	4820      	ldr	r0, [pc, #128]	; (8000744 <display7SEG_en+0xf8>)
 80006c2:	f001 fa90 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	481d      	ldr	r0, [pc, #116]	; (8000744 <display7SEG_en+0xf8>)
 80006ce:	f001 fa8a 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 80006d2:	e032      	b.n	800073a <display7SEG_en+0xee>
	case 2:
		HAL_GPIO_WritePin(GPIOB, EN0_Pin, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <display7SEG_en+0xf8>)
 80006dc:	f001 fa83 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <display7SEG_en+0xf8>)
 80006e8:	f001 fa7d 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <display7SEG_en+0xf8>)
 80006f4:	f001 fa77 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	4811      	ldr	r0, [pc, #68]	; (8000744 <display7SEG_en+0xf8>)
 8000700:	f001 fa71 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 8000704:	e019      	b.n	800073a <display7SEG_en+0xee>
	case 3:
		HAL_GPIO_WritePin(GPIOB, EN0_Pin, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <display7SEG_en+0xf8>)
 800070e:	f001 fa6a 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <display7SEG_en+0xf8>)
 800071a:	f001 fa64 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <display7SEG_en+0xf8>)
 8000726:	f001 fa5e 	bl	8001be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <display7SEG_en+0xf8>)
 8000732:	f001 fa58 	bl	8001be6 <HAL_GPIO_WritePin>
		break;
 8000736:	e000      	b.n	800073a <display7SEG_en+0xee>
	default:
		break;
 8000738:	bf00      	nop
	}
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010c00 	.word	0x40010c00

08000748 <isButtonPressed>:

int keyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int button_flag[3] = {0, 0, 0};
int timeForKeyPress = 50;

int isButtonPressed(int button_index){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(button_flag[button_index] == 1){
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <isButtonPressed+0x30>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d106      	bne.n	800076a <isButtonPressed+0x22>
		button_flag[button_index] = 0;
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <isButtonPressed+0x30>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2100      	movs	r1, #0
 8000762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000766:	2301      	movs	r3, #1
 8000768:	e000      	b.n	800076c <isButtonPressed+0x24>
	}
	else return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000088 	.word	0x20000088

0800077c <subKeyProcess>:

void subKeyProcess(int button_index){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	button_flag[button_index] = 1;
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <subKeyProcess+0x1c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2101      	movs	r1, #1
 800078a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000088 	.word	0x20000088

0800079c <getKeyInput>:

void getKeyInput(int button_index){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	keyReg0[button_index] = keyReg1[button_index];
 80007a4:	4a31      	ldr	r2, [pc, #196]	; (800086c <getKeyInput+0xd0>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ac:	4930      	ldr	r1, [pc, #192]	; (8000870 <getKeyInput+0xd4>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[button_index] = keyReg2[button_index];
 80007b4:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <getKeyInput+0xd8>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007bc:	492b      	ldr	r1, [pc, #172]	; (800086c <getKeyInput+0xd0>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[button_index] = HAL_GPIO_ReadPin(GPIOB, ButtonPin[button_index]);
 80007c4:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <getKeyInput+0xdc>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	482a      	ldr	r0, [pc, #168]	; (800087c <getKeyInput+0xe0>)
 80007d2:	f001 f9f1 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4619      	mov	r1, r3
 80007da:	4a26      	ldr	r2, [pc, #152]	; (8000874 <getKeyInput+0xd8>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if((keyReg0[button_index] == keyReg1[button_index]) && (keyReg1[button_index] == keyReg2[button_index])){
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <getKeyInput+0xd4>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ea:	4920      	ldr	r1, [pc, #128]	; (800086c <getKeyInput+0xd0>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d136      	bne.n	8000864 <getKeyInput+0xc8>
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <getKeyInput+0xd0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fe:	491d      	ldr	r1, [pc, #116]	; (8000874 <getKeyInput+0xd8>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d12c      	bne.n	8000864 <getKeyInput+0xc8>
		if(keyReg2[button_index] != keyReg3[button_index]){
 800080a:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <getKeyInput+0xd8>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000812:	491b      	ldr	r1, [pc, #108]	; (8000880 <getKeyInput+0xe4>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800081a:	429a      	cmp	r2, r3
 800081c:	d014      	beq.n	8000848 <getKeyInput+0xac>
			keyReg3[button_index] = keyReg2[button_index];
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <getKeyInput+0xd8>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000826:	4916      	ldr	r1, [pc, #88]	; (8000880 <getKeyInput+0xe4>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[button_index] == PRESSED_STATE){
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <getKeyInput+0xd8>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d114      	bne.n	8000864 <getKeyInput+0xc8>
				subKeyProcess(button_index);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff9e 	bl	800077c <subKeyProcess>
				timeForKeyPress = 50;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <getKeyInput+0xe8>)
 8000842:	2232      	movs	r2, #50	; 0x32
 8000844:	601a      	str	r2, [r3, #0]
			if(timeForKeyPress <= 0){
				keyReg3[button_index] = NORMAL_STATE;
			}
		}
	}
}
 8000846:	e00d      	b.n	8000864 <getKeyInput+0xc8>
			timeForKeyPress--;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <getKeyInput+0xe8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <getKeyInput+0xe8>)
 8000850:	6013      	str	r3, [r2, #0]
			if(timeForKeyPress <= 0){
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <getKeyInput+0xe8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	dc04      	bgt.n	8000864 <getKeyInput+0xc8>
				keyReg3[button_index] = NORMAL_STATE;
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <getKeyInput+0xe4>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2101      	movs	r1, #1
 8000860:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000018 	.word	0x20000018
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000024 	.word	0x20000024
 8000878:	20000000 	.word	0x20000000
 800087c:	40010c00 	.word	0x40010c00
 8000880:	20000030 	.word	0x20000030
 8000884:	2000003c 	.word	0x2000003c

08000888 <autoStatusWay1>:
 *      Author: Admin
 */

#include "fsm_automatic.h"

void autoStatusWay1(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	switch (autoStatus1){
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <autoStatusWay1+0xf8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b04      	subs	r3, #4
 8000892:	2b03      	cmp	r3, #3
 8000894:	d86a      	bhi.n	800096c <autoStatusWay1+0xe4>
 8000896:	a201      	add	r2, pc, #4	; (adr r2, 800089c <autoStatusWay1+0x14>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	080008c5 	.word	0x080008c5
 80008a0:	080008fd 	.word	0x080008fd
 80008a4:	08000935 	.word	0x08000935
 80008a8:	080008ad 	.word	0x080008ad
	case LED_INIT:
		autoStatus1 = RED;
 80008ac:	4b34      	ldr	r3, [pc, #208]	; (8000980 <autoStatusWay1+0xf8>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	601a      	str	r2, [r3, #0]
		count1 = RED_timer;
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <autoStatusWay1+0xfc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a34      	ldr	r2, [pc, #208]	; (8000988 <autoStatusWay1+0x100>)
 80008b8:	6013      	str	r3, [r2, #0]
		setTimer(3,100);
 80008ba:	2164      	movs	r1, #100	; 0x64
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 fd9d 	bl	80013fc <setTimer>
		break;
 80008c2:	e05a      	b.n	800097a <autoStatusWay1+0xf2>
	case RED:
		displayLED1(RED);
 80008c4:	2004      	movs	r0, #4
 80008c6:	f7ff fc41 	bl	800014c <displayLED1>
		if(timer_flag[3] == 1){
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <autoStatusWay1+0x104>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d14e      	bne.n	8000970 <autoStatusWay1+0xe8>
			count1 = count1 - 1;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <autoStatusWay1+0x100>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <autoStatusWay1+0x100>)
 80008da:	6013      	str	r3, [r2, #0]
			if(count1 <= 0){
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <autoStatusWay1+0x100>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dc06      	bgt.n	80008f2 <autoStatusWay1+0x6a>
				autoStatus1 = GREEN;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <autoStatusWay1+0xf8>)
 80008e6:	2206      	movs	r2, #6
 80008e8:	601a      	str	r2, [r3, #0]
				count1 = GREEN_timer;
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <autoStatusWay1+0x108>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a26      	ldr	r2, [pc, #152]	; (8000988 <autoStatusWay1+0x100>)
 80008f0:	6013      	str	r3, [r2, #0]
			}
			setTimer(3,100);
 80008f2:	2164      	movs	r1, #100	; 0x64
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 fd81 	bl	80013fc <setTimer>
		}
		break;
 80008fa:	e039      	b.n	8000970 <autoStatusWay1+0xe8>
	case YELLOW:
		displayLED1(YELLOW);
 80008fc:	2005      	movs	r0, #5
 80008fe:	f7ff fc25 	bl	800014c <displayLED1>
		if(timer_flag[3] == 1){
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <autoStatusWay1+0x104>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d134      	bne.n	8000974 <autoStatusWay1+0xec>
			count1 = count1 - 1;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <autoStatusWay1+0x100>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3b01      	subs	r3, #1
 8000910:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <autoStatusWay1+0x100>)
 8000912:	6013      	str	r3, [r2, #0]
			if(count1 <= 0){
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <autoStatusWay1+0x100>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	dc06      	bgt.n	800092a <autoStatusWay1+0xa2>
				autoStatus1 = RED;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <autoStatusWay1+0xf8>)
 800091e:	2204      	movs	r2, #4
 8000920:	601a      	str	r2, [r3, #0]
				count1 = RED_timer;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <autoStatusWay1+0xfc>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <autoStatusWay1+0x100>)
 8000928:	6013      	str	r3, [r2, #0]
			}
			setTimer(3,100);
 800092a:	2164      	movs	r1, #100	; 0x64
 800092c:	2003      	movs	r0, #3
 800092e:	f000 fd65 	bl	80013fc <setTimer>
		}
		break;
 8000932:	e01f      	b.n	8000974 <autoStatusWay1+0xec>
	case GREEN:
		displayLED1(GREEN);
 8000934:	2006      	movs	r0, #6
 8000936:	f7ff fc09 	bl	800014c <displayLED1>
		if(timer_flag[3] == 1){
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <autoStatusWay1+0x104>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d11a      	bne.n	8000978 <autoStatusWay1+0xf0>
			count1 = count1 - 1;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <autoStatusWay1+0x100>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <autoStatusWay1+0x100>)
 800094a:	6013      	str	r3, [r2, #0]
			if(count1 <= 0){
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <autoStatusWay1+0x100>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc06      	bgt.n	8000962 <autoStatusWay1+0xda>
				autoStatus1 = YELLOW;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <autoStatusWay1+0xf8>)
 8000956:	2205      	movs	r2, #5
 8000958:	601a      	str	r2, [r3, #0]
				count1 = YELLOW_timer;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <autoStatusWay1+0x10c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <autoStatusWay1+0x100>)
 8000960:	6013      	str	r3, [r2, #0]
			}
			setTimer(3,100);
 8000962:	2164      	movs	r1, #100	; 0x64
 8000964:	2003      	movs	r0, #3
 8000966:	f000 fd49 	bl	80013fc <setTimer>
		}
		break;
 800096a:	e005      	b.n	8000978 <autoStatusWay1+0xf0>
	default:
		break;
 800096c:	bf00      	nop
 800096e:	e004      	b.n	800097a <autoStatusWay1+0xf2>
		break;
 8000970:	bf00      	nop
 8000972:	e002      	b.n	800097a <autoStatusWay1+0xf2>
		break;
 8000974:	bf00      	nop
 8000976:	e000      	b.n	800097a <autoStatusWay1+0xf2>
		break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000044 	.word	0x20000044
 8000984:	2000004c 	.word	0x2000004c
 8000988:	20000058 	.word	0x20000058
 800098c:	200000c4 	.word	0x200000c4
 8000990:	20000054 	.word	0x20000054
 8000994:	20000050 	.word	0x20000050

08000998 <autoStatusWay2>:

void autoStatusWay2(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	switch (autoStatus2){
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <autoStatusWay2+0xf8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3b04      	subs	r3, #4
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d86a      	bhi.n	8000a7c <autoStatusWay2+0xe4>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <autoStatusWay2+0x14>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	080009d5 	.word	0x080009d5
 80009b0:	08000a0d 	.word	0x08000a0d
 80009b4:	08000a45 	.word	0x08000a45
 80009b8:	080009bd 	.word	0x080009bd
	case LED_INIT:
		autoStatus2 = GREEN;
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <autoStatusWay2+0xf8>)
 80009be:	2206      	movs	r2, #6
 80009c0:	601a      	str	r2, [r3, #0]
		count2 = GREEN_timer;
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <autoStatusWay2+0xfc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <autoStatusWay2+0x100>)
 80009c8:	6013      	str	r3, [r2, #0]
		setTimer(2,100);
 80009ca:	2164      	movs	r1, #100	; 0x64
 80009cc:	2002      	movs	r0, #2
 80009ce:	f000 fd15 	bl	80013fc <setTimer>
		break;
 80009d2:	e05a      	b.n	8000a8a <autoStatusWay2+0xf2>
	case RED:
		displayLED2(RED);
 80009d4:	2004      	movs	r0, #4
 80009d6:	f7ff fc15 	bl	8000204 <displayLED2>
		if(timer_flag[2] == 1){
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <autoStatusWay2+0x104>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d14e      	bne.n	8000a80 <autoStatusWay2+0xe8>
			count2 = count2 - 1;
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <autoStatusWay2+0x100>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <autoStatusWay2+0x100>)
 80009ea:	6013      	str	r3, [r2, #0]
			if(count2 <= 0){
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <autoStatusWay2+0x100>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dc06      	bgt.n	8000a02 <autoStatusWay2+0x6a>
				autoStatus2 = GREEN;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <autoStatusWay2+0xf8>)
 80009f6:	2206      	movs	r2, #6
 80009f8:	601a      	str	r2, [r3, #0]
				count2 = GREEN_timer;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <autoStatusWay2+0xfc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a26      	ldr	r2, [pc, #152]	; (8000a98 <autoStatusWay2+0x100>)
 8000a00:	6013      	str	r3, [r2, #0]
			}
			setTimer(2,100);
 8000a02:	2164      	movs	r1, #100	; 0x64
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 fcf9 	bl	80013fc <setTimer>
		}
		break;
 8000a0a:	e039      	b.n	8000a80 <autoStatusWay2+0xe8>
	case YELLOW:
		displayLED2(YELLOW);
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f7ff fbf9 	bl	8000204 <displayLED2>
		if(timer_flag[2] == 1){
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <autoStatusWay2+0x104>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d134      	bne.n	8000a84 <autoStatusWay2+0xec>
			count2 = count2 - 1;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <autoStatusWay2+0x100>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <autoStatusWay2+0x100>)
 8000a22:	6013      	str	r3, [r2, #0]
			if(count2 <= 0){
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <autoStatusWay2+0x100>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dc06      	bgt.n	8000a3a <autoStatusWay2+0xa2>
				autoStatus2 = RED;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <autoStatusWay2+0xf8>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	601a      	str	r2, [r3, #0]
				count2 = RED_timer;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <autoStatusWay2+0x108>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <autoStatusWay2+0x100>)
 8000a38:	6013      	str	r3, [r2, #0]
			}
			setTimer(2,100);
 8000a3a:	2164      	movs	r1, #100	; 0x64
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 fcdd 	bl	80013fc <setTimer>
		}
		break;
 8000a42:	e01f      	b.n	8000a84 <autoStatusWay2+0xec>
	case GREEN:
		displayLED2(GREEN);
 8000a44:	2006      	movs	r0, #6
 8000a46:	f7ff fbdd 	bl	8000204 <displayLED2>
		if(timer_flag[2] == 1){
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <autoStatusWay2+0x104>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d11a      	bne.n	8000a88 <autoStatusWay2+0xf0>
			count2 = count2 - 1;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <autoStatusWay2+0x100>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <autoStatusWay2+0x100>)
 8000a5a:	6013      	str	r3, [r2, #0]
			if(count2 <= 0){
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <autoStatusWay2+0x100>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	dc06      	bgt.n	8000a72 <autoStatusWay2+0xda>
				autoStatus2 = YELLOW;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <autoStatusWay2+0xf8>)
 8000a66:	2205      	movs	r2, #5
 8000a68:	601a      	str	r2, [r3, #0]
				count2 = YELLOW_timer;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <autoStatusWay2+0x10c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <autoStatusWay2+0x100>)
 8000a70:	6013      	str	r3, [r2, #0]
			}
			setTimer(2,100);
 8000a72:	2164      	movs	r1, #100	; 0x64
 8000a74:	2002      	movs	r0, #2
 8000a76:	f000 fcc1 	bl	80013fc <setTimer>
		}
		break;
 8000a7a:	e005      	b.n	8000a88 <autoStatusWay2+0xf0>
	default:
		break;
 8000a7c:	bf00      	nop
 8000a7e:	e004      	b.n	8000a8a <autoStatusWay2+0xf2>
		break;
 8000a80:	bf00      	nop
 8000a82:	e002      	b.n	8000a8a <autoStatusWay2+0xf2>
		break;
 8000a84:	bf00      	nop
 8000a86:	e000      	b.n	8000a8a <autoStatusWay2+0xf2>
		break;
 8000a88:	bf00      	nop
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000048 	.word	0x20000048
 8000a94:	20000054 	.word	0x20000054
 8000a98:	2000005c 	.word	0x2000005c
 8000a9c:	200000c4 	.word	0x200000c4
 8000aa0:	2000004c 	.word	0x2000004c
 8000aa4:	20000050 	.word	0x20000050

08000aa8 <fsm_auto_run>:

void fsm_auto_run(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
		if(modeStatus == MODE1){
 8000aac:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <fsm_auto_run+0x12c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b0b      	cmp	r3, #11
 8000ab2:	d16e      	bne.n	8000b92 <fsm_auto_run+0xea>
			autoStatusWay1();
 8000ab4:	f7ff fee8 	bl	8000888 <autoStatusWay1>
			autoStatusWay2();
 8000ab8:	f7ff ff6e 	bl	8000998 <autoStatusWay2>
			if(timer_flag[1] == 1){
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <fsm_auto_run+0x130>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d166      	bne.n	8000b92 <fsm_auto_run+0xea>
				switch (counter){
 8000ac4:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <fsm_auto_run+0x134>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d851      	bhi.n	8000b70 <fsm_auto_run+0xc8>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <fsm_auto_run+0x2c>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000b03 	.word	0x08000b03
 8000adc:	08000b2b 	.word	0x08000b2b
 8000ae0:	08000b49 	.word	0x08000b49
				case 0:
					display7SEG_en(0);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fdb1 	bl	800064c <display7SEG_en>
					display7SEG(count1/10);
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <fsm_auto_run+0x138>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <fsm_auto_run+0x13c>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	1092      	asrs	r2, r2, #2
 8000af6:	17db      	asrs	r3, r3, #31
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fbde 	bl	80002bc <display7SEG>
					break;
 8000b00:	e037      	b.n	8000b72 <fsm_auto_run+0xca>
				case 1:
					display7SEG_en(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fda2 	bl	800064c <display7SEG_en>
					display7SEG(count1%10);
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <fsm_auto_run+0x138>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <fsm_auto_run+0x13c>)
 8000b0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b12:	1099      	asrs	r1, r3, #2
 8000b14:	17d3      	asrs	r3, r2, #31
 8000b16:	1ac9      	subs	r1, r1, r3
 8000b18:	460b      	mov	r3, r1
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	1ad1      	subs	r1, r2, r3
 8000b22:	4608      	mov	r0, r1
 8000b24:	f7ff fbca 	bl	80002bc <display7SEG>
					break;
 8000b28:	e023      	b.n	8000b72 <fsm_auto_run+0xca>
				case 2:
					display7SEG_en(2);
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff fd8e 	bl	800064c <display7SEG_en>
					display7SEG(count2/10);
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <fsm_auto_run+0x140>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <fsm_auto_run+0x13c>)
 8000b36:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3a:	1092      	asrs	r2, r2, #2
 8000b3c:	17db      	asrs	r3, r3, #31
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fbbb 	bl	80002bc <display7SEG>
					break;
 8000b46:	e014      	b.n	8000b72 <fsm_auto_run+0xca>
				case 3:
					display7SEG_en(3);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f7ff fd7f 	bl	800064c <display7SEG_en>
					display7SEG(count2%10);
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <fsm_auto_run+0x140>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <fsm_auto_run+0x13c>)
 8000b54:	fb83 1302 	smull	r1, r3, r3, r2
 8000b58:	1099      	asrs	r1, r3, #2
 8000b5a:	17d3      	asrs	r3, r2, #31
 8000b5c:	1ac9      	subs	r1, r1, r3
 8000b5e:	460b      	mov	r3, r1
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	1ad1      	subs	r1, r2, r3
 8000b68:	4608      	mov	r0, r1
 8000b6a:	f7ff fba7 	bl	80002bc <display7SEG>
					break;
 8000b6e:	e000      	b.n	8000b72 <fsm_auto_run+0xca>
				default:
					break;
 8000b70:	bf00      	nop
				}
				counter++;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <fsm_auto_run+0x134>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <fsm_auto_run+0x134>)
 8000b7a:	6013      	str	r3, [r2, #0]
				if(counter > 3) counter = 0;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <fsm_auto_run+0x134>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	dd02      	ble.n	8000b8a <fsm_auto_run+0xe2>
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <fsm_auto_run+0x134>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
				setTimer(1,10);
 8000b8a:	210a      	movs	r1, #10
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 fc35 	bl	80013fc <setTimer>
			}
		}
		if(isButtonPressed(0) == 1){
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fdd8 	bl	8000748 <isButtonPressed>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d118      	bne.n	8000bd0 <fsm_auto_run+0x128>
			modeStatus = MODE2;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <fsm_auto_run+0x12c>)
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	601a      	str	r2, [r3, #0]
			time_dur = RED_timer;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <fsm_auto_run+0x144>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <fsm_auto_run+0x148>)
 8000baa:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000bac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fc23 	bl	80013fc <setTimer>
			setTimer(4,10);
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f000 fc1f 	bl	80013fc <setTimer>
			setTimer(5,50);
 8000bbe:	2132      	movs	r1, #50	; 0x32
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f000 fc1b 	bl	80013fc <setTimer>
			counter = 0;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <fsm_auto_run+0x134>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
			clear();
 8000bcc:	f000 faa2 	bl	8001114 <clear>
		}
	}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000040 	.word	0x20000040
 8000bd8:	200000c4 	.word	0x200000c4
 8000bdc:	20000098 	.word	0x20000098
 8000be0:	20000058 	.word	0x20000058
 8000be4:	66666667 	.word	0x66666667
 8000be8:	2000005c 	.word	0x2000005c
 8000bec:	2000004c 	.word	0x2000004c
 8000bf0:	20000094 	.word	0x20000094

08000bf4 <mode2>:
 */

#include "fsm_manual.h"


void mode2(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	if(isButtonPressed(1) == 1){
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fda5 	bl	8000748 <isButtonPressed>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d10b      	bne.n	8000c1c <mode2+0x28>
		time_dur++;
 8000c04:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <mode2+0x10c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a3d      	ldr	r2, [pc, #244]	; (8000d00 <mode2+0x10c>)
 8000c0c:	6013      	str	r3, [r2, #0]
		if(time_dur > 99) time_dur = 1;
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <mode2+0x10c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b63      	cmp	r3, #99	; 0x63
 8000c14:	dd02      	ble.n	8000c1c <mode2+0x28>
 8000c16:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <mode2+0x10c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
	}
	if(isButtonPressed(2) == 1){
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff fd93 	bl	8000748 <isButtonPressed>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d103      	bne.n	8000c30 <mode2+0x3c>
		RED_timer = time_dur;
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <mode2+0x10c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a35      	ldr	r2, [pc, #212]	; (8000d04 <mode2+0x110>)
 8000c2e:	6013      	str	r3, [r2, #0]
	}
	if(timer_flag[4] == 1){
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <mode2+0x114>)
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d151      	bne.n	8000cdc <mode2+0xe8>
		switch (counter){
 8000c38:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <mode2+0x118>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d83c      	bhi.n	8000cba <mode2+0xc6>
 8000c40:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <mode2+0x54>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000c59 	.word	0x08000c59
 8000c4c:	08000c67 	.word	0x08000c67
 8000c50:	08000c75 	.word	0x08000c75
 8000c54:	08000c93 	.word	0x08000c93
		case 0:
			display7SEG_en(0);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fcf7 	bl	800064c <display7SEG_en>
			display7SEG(0);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fb2c 	bl	80002bc <display7SEG>
			break;
 8000c64:	e02a      	b.n	8000cbc <mode2+0xc8>
		case 1:
			display7SEG_en(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff fcf0 	bl	800064c <display7SEG_en>
			display7SEG(2);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fb25 	bl	80002bc <display7SEG>
			break;
 8000c72:	e023      	b.n	8000cbc <mode2+0xc8>
		case 2:
			display7SEG_en(2);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff fce9 	bl	800064c <display7SEG_en>
			display7SEG(time_dur/10);//time_dur = time duration
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <mode2+0x10c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <mode2+0x11c>)
 8000c80:	fb82 1203 	smull	r1, r2, r2, r3
 8000c84:	1092      	asrs	r2, r2, #2
 8000c86:	17db      	asrs	r3, r3, #31
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fb16 	bl	80002bc <display7SEG>
			break;
 8000c90:	e014      	b.n	8000cbc <mode2+0xc8>
		case 3:
			display7SEG_en(3);
 8000c92:	2003      	movs	r0, #3
 8000c94:	f7ff fcda 	bl	800064c <display7SEG_en>
			display7SEG(time_dur%10);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <mode2+0x10c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <mode2+0x11c>)
 8000c9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca2:	1099      	asrs	r1, r3, #2
 8000ca4:	17d3      	asrs	r3, r2, #31
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	460b      	mov	r3, r1
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	1ad1      	subs	r1, r2, r3
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	f7ff fb02 	bl	80002bc <display7SEG>
			break;
 8000cb8:	e000      	b.n	8000cbc <mode2+0xc8>
		default:
			break;
 8000cba:	bf00      	nop
		}
		counter++;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <mode2+0x118>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <mode2+0x118>)
 8000cc4:	6013      	str	r3, [r2, #0]
		if(counter > 3) counter = 0;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <mode2+0x118>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	dd02      	ble.n	8000cd4 <mode2+0xe0>
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <mode2+0x118>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
		setTimer(4,10);
 8000cd4:	210a      	movs	r1, #10
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f000 fb90 	bl	80013fc <setTimer>
	}
	if(timer_flag[5] == 1){
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <mode2+0x114>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10b      	bne.n	8000cfc <mode2+0x108>
		HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <mode2+0x120>)
 8000ce8:	f000 ff95 	bl	8001c16 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000cec:	2120      	movs	r1, #32
 8000cee:	480a      	ldr	r0, [pc, #40]	; (8000d18 <mode2+0x124>)
 8000cf0:	f000 ff91 	bl	8001c16 <HAL_GPIO_TogglePin>
		setTimer(5,50);
 8000cf4:	2132      	movs	r1, #50	; 0x32
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f000 fb80 	bl	80013fc <setTimer>
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000094 	.word	0x20000094
 8000d04:	2000004c 	.word	0x2000004c
 8000d08:	200000c4 	.word	0x200000c4
 8000d0c:	20000098 	.word	0x20000098
 8000d10:	66666667 	.word	0x66666667
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <mode3>:

void mode3(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	if(isButtonPressed(1) == 1){
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff fd11 	bl	8000748 <isButtonPressed>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d10b      	bne.n	8000d44 <mode3+0x28>
		time_dur++;
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <mode3+0x10c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <mode3+0x10c>)
 8000d34:	6013      	str	r3, [r2, #0]
		if(time_dur > 99) time_dur = 1;
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <mode3+0x10c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b63      	cmp	r3, #99	; 0x63
 8000d3c:	dd02      	ble.n	8000d44 <mode3+0x28>
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <mode3+0x10c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
	}
	if(isButtonPressed(2) == 1){
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff fcff 	bl	8000748 <isButtonPressed>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d103      	bne.n	8000d58 <mode3+0x3c>
		YELLOW_timer = time_dur;
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <mode3+0x10c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <mode3+0x110>)
 8000d56:	6013      	str	r3, [r2, #0]
	}
	if(timer_flag[6] == 1){
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <mode3+0x114>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d151      	bne.n	8000e04 <mode3+0xe8>
		switch (counter){
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <mode3+0x118>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d83c      	bhi.n	8000de2 <mode3+0xc6>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <mode3+0x54>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000d8f 	.word	0x08000d8f
 8000d78:	08000d9d 	.word	0x08000d9d
 8000d7c:	08000dbb 	.word	0x08000dbb
		case 0:
			display7SEG_en(0);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fc63 	bl	800064c <display7SEG_en>
			display7SEG(0);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fa98 	bl	80002bc <display7SEG>
			break;
 8000d8c:	e02a      	b.n	8000de4 <mode3+0xc8>
		case 1:
			display7SEG_en(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fc5c 	bl	800064c <display7SEG_en>
			display7SEG(3);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f7ff fa91 	bl	80002bc <display7SEG>
			break;
 8000d9a:	e023      	b.n	8000de4 <mode3+0xc8>
		case 2:
			display7SEG_en(2);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff fc55 	bl	800064c <display7SEG_en>
			display7SEG(time_dur/10);
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <mode3+0x10c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a24      	ldr	r2, [pc, #144]	; (8000e38 <mode3+0x11c>)
 8000da8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dac:	1092      	asrs	r2, r2, #2
 8000dae:	17db      	asrs	r3, r3, #31
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa82 	bl	80002bc <display7SEG>
			break;
 8000db8:	e014      	b.n	8000de4 <mode3+0xc8>
		case 3:
			display7SEG_en(3);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f7ff fc46 	bl	800064c <display7SEG_en>
			display7SEG(time_dur%10);
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <mode3+0x10c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <mode3+0x11c>)
 8000dc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000dca:	1099      	asrs	r1, r3, #2
 8000dcc:	17d3      	asrs	r3, r2, #31
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	1ad1      	subs	r1, r2, r3
 8000dda:	4608      	mov	r0, r1
 8000ddc:	f7ff fa6e 	bl	80002bc <display7SEG>
			break;
 8000de0:	e000      	b.n	8000de4 <mode3+0xc8>
		default:
			break;
 8000de2:	bf00      	nop
		}
		counter++;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <mode3+0x118>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <mode3+0x118>)
 8000dec:	6013      	str	r3, [r2, #0]
		if(counter > 3) counter = 0;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <mode3+0x118>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	dd02      	ble.n	8000dfc <mode3+0xe0>
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <mode3+0x118>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
		setTimer(6,10);
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f000 fafc 	bl	80013fc <setTimer>
	}
	if(timer_flag[7] == 1){
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <mode3+0x114>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d10b      	bne.n	8000e24 <mode3+0x108>
		HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <mode3+0x120>)
 8000e10:	f000 ff01 	bl	8001c16 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <mode3+0x124>)
 8000e18:	f000 fefd 	bl	8001c16 <HAL_GPIO_TogglePin>
		setTimer(7,50);
 8000e1c:	2132      	movs	r1, #50	; 0x32
 8000e1e:	2007      	movs	r0, #7
 8000e20:	f000 faec 	bl	80013fc <setTimer>
	}
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	20000050 	.word	0x20000050
 8000e30:	200000c4 	.word	0x200000c4
 8000e34:	20000098 	.word	0x20000098
 8000e38:	66666667 	.word	0x66666667
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <mode4>:

void mode4(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	if(isButtonPressed(1) == 1){
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fc7d 	bl	8000748 <isButtonPressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10b      	bne.n	8000e6c <mode4+0x28>
		time_dur++;
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <mode4+0x10c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <mode4+0x10c>)
 8000e5c:	6013      	str	r3, [r2, #0]
		if(time_dur > 99) time_dur = 1;
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <mode4+0x10c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b63      	cmp	r3, #99	; 0x63
 8000e64:	dd02      	ble.n	8000e6c <mode4+0x28>
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <mode4+0x10c>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
	}
	if(isButtonPressed(2) == 1){
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fc6b 	bl	8000748 <isButtonPressed>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d103      	bne.n	8000e80 <mode4+0x3c>
		GREEN_timer = time_dur;
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <mode4+0x10c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a35      	ldr	r2, [pc, #212]	; (8000f54 <mode4+0x110>)
 8000e7e:	6013      	str	r3, [r2, #0]
	}
	if(timer_flag[8] == 1){
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <mode4+0x114>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d151      	bne.n	8000f2c <mode4+0xe8>
		switch (counter){
 8000e88:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <mode4+0x118>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d83c      	bhi.n	8000f0a <mode4+0xc6>
 8000e90:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <mode4+0x54>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000ea9 	.word	0x08000ea9
 8000e9c:	08000eb7 	.word	0x08000eb7
 8000ea0:	08000ec5 	.word	0x08000ec5
 8000ea4:	08000ee3 	.word	0x08000ee3
		case 0:
			display7SEG_en(0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fbcf 	bl	800064c <display7SEG_en>
			display7SEG(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fa04 	bl	80002bc <display7SEG>
			break;
 8000eb4:	e02a      	b.n	8000f0c <mode4+0xc8>
		case 1:
			display7SEG_en(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fbc8 	bl	800064c <display7SEG_en>
			display7SEG(4);
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f7ff f9fd 	bl	80002bc <display7SEG>
			break;
 8000ec2:	e023      	b.n	8000f0c <mode4+0xc8>
		case 2:
			display7SEG_en(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f7ff fbc1 	bl	800064c <display7SEG_en>
			display7SEG(time_dur/10);
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <mode4+0x10c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <mode4+0x11c>)
 8000ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed4:	1092      	asrs	r2, r2, #2
 8000ed6:	17db      	asrs	r3, r3, #31
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f9ee 	bl	80002bc <display7SEG>
			break;
 8000ee0:	e014      	b.n	8000f0c <mode4+0xc8>
		case 3:
			display7SEG_en(3);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f7ff fbb2 	bl	800064c <display7SEG_en>
			display7SEG(time_dur%10);
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <mode4+0x10c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <mode4+0x11c>)
 8000eee:	fb83 1302 	smull	r1, r3, r3, r2
 8000ef2:	1099      	asrs	r1, r3, #2
 8000ef4:	17d3      	asrs	r3, r2, #31
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	1ad1      	subs	r1, r2, r3
 8000f02:	4608      	mov	r0, r1
 8000f04:	f7ff f9da 	bl	80002bc <display7SEG>
			break;
 8000f08:	e000      	b.n	8000f0c <mode4+0xc8>
		default:
			break;
 8000f0a:	bf00      	nop
		}
		counter++;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <mode4+0x118>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <mode4+0x118>)
 8000f14:	6013      	str	r3, [r2, #0]
		if(counter > 3) counter = 0;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <mode4+0x118>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	dd02      	ble.n	8000f24 <mode4+0xe0>
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <mode4+0x118>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
		setTimer(8,10);
 8000f24:	210a      	movs	r1, #10
 8000f26:	2008      	movs	r0, #8
 8000f28:	f000 fa68 	bl	80013fc <setTimer>
	}
	if(timer_flag[9] == 1){
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <mode4+0x114>)
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d10b      	bne.n	8000f4c <mode4+0x108>
		HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <mode4+0x120>)
 8000f38:	f000 fe6d 	bl	8001c16 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <mode4+0x124>)
 8000f40:	f000 fe69 	bl	8001c16 <HAL_GPIO_TogglePin>
		setTimer(9,50);
 8000f44:	2132      	movs	r1, #50	; 0x32
 8000f46:	2009      	movs	r0, #9
 8000f48:	f000 fa58 	bl	80013fc <setTimer>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000094 	.word	0x20000094
 8000f54:	20000054 	.word	0x20000054
 8000f58:	200000c4 	.word	0x200000c4
 8000f5c:	20000098 	.word	0x20000098
 8000f60:	66666667 	.word	0x66666667
 8000f64:	40010800 	.word	0x40010800
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <fsm_manual_run>:

void fsm_manual_run(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	switch (modeStatus){
 8000f70:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <fsm_manual_run+0x188>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b0e      	cmp	r3, #14
 8000f76:	f000 808b 	beq.w	8001090 <fsm_manual_run+0x124>
 8000f7a:	2b0e      	cmp	r3, #14
 8000f7c:	f300 80b0 	bgt.w	80010e0 <fsm_manual_run+0x174>
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d002      	beq.n	8000f8a <fsm_manual_run+0x1e>
 8000f84:	2b0d      	cmp	r3, #13
 8000f86:	d042      	beq.n	800100e <fsm_manual_run+0xa2>
			setTimer(2,50);
			clear();
		}
		break;
	default:
		break;
 8000f88:	e0aa      	b.n	80010e0 <fsm_manual_run+0x174>
		mode2();
 8000f8a:	f7ff fe33 	bl	8000bf4 <mode2>
		if(timer_flag[0] == 1){
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <fsm_manual_run+0x18c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d11a      	bne.n	8000fcc <fsm_manual_run+0x60>
			modeStatus = MODE1;
 8000f96:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <fsm_manual_run+0x188>)
 8000f98:	220b      	movs	r2, #11
 8000f9a:	601a      	str	r2, [r3, #0]
			counter = 0;
 8000f9c:	4b57      	ldr	r3, [pc, #348]	; (80010fc <fsm_manual_run+0x190>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
			autoStatus1 = LED_INIT;
 8000fa2:	4b57      	ldr	r3, [pc, #348]	; (8001100 <fsm_manual_run+0x194>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
			autoStatus2 = LED_INIT;
 8000fa8:	4b56      	ldr	r3, [pc, #344]	; (8001104 <fsm_manual_run+0x198>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000fae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 fa22 	bl	80013fc <setTimer>
			setTimer(1,10);
 8000fb8:	210a      	movs	r1, #10
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 fa1e 	bl	80013fc <setTimer>
			setTimer(2,50);
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f000 fa1a 	bl	80013fc <setTimer>
			clear();
 8000fc8:	f000 f8a4 	bl	8001114 <clear>
		if(isButtonPressed(0) == 1){
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fbbb 	bl	8000748 <isButtonPressed>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 8085 	bne.w	80010e4 <fsm_manual_run+0x178>
			modeStatus = MODE3;
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <fsm_manual_run+0x188>)
 8000fdc:	220d      	movs	r2, #13
 8000fde:	601a      	str	r2, [r3, #0]
			time_dur = YELLOW_timer;
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <fsm_manual_run+0x19c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a49      	ldr	r2, [pc, #292]	; (800110c <fsm_manual_run+0x1a0>)
 8000fe6:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fa05 	bl	80013fc <setTimer>
			setTimer(6,10);
 8000ff2:	210a      	movs	r1, #10
 8000ff4:	2006      	movs	r0, #6
 8000ff6:	f000 fa01 	bl	80013fc <setTimer>
			setTimer(7,50);
 8000ffa:	2132      	movs	r1, #50	; 0x32
 8000ffc:	2007      	movs	r0, #7
 8000ffe:	f000 f9fd 	bl	80013fc <setTimer>
			counter = 0;
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <fsm_manual_run+0x190>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
			clear();
 8001008:	f000 f884 	bl	8001114 <clear>
		break;
 800100c:	e06a      	b.n	80010e4 <fsm_manual_run+0x178>
		mode3();
 800100e:	f7ff fe85 	bl	8000d1c <mode3>
		if(timer_flag[0] == 1){
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <fsm_manual_run+0x18c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d11a      	bne.n	8001050 <fsm_manual_run+0xe4>
			modeStatus = MODE1;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <fsm_manual_run+0x188>)
 800101c:	220b      	movs	r2, #11
 800101e:	601a      	str	r2, [r3, #0]
			counter = 0;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <fsm_manual_run+0x190>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
			autoStatus1 = LED_INIT;
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <fsm_manual_run+0x194>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
			autoStatus2 = LED_INIT;
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <fsm_manual_run+0x198>)
 800102e:	2207      	movs	r2, #7
 8001030:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8001032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f9e0 	bl	80013fc <setTimer>
			setTimer(1,10);
 800103c:	210a      	movs	r1, #10
 800103e:	2001      	movs	r0, #1
 8001040:	f000 f9dc 	bl	80013fc <setTimer>
			setTimer(2,50);
 8001044:	2132      	movs	r1, #50	; 0x32
 8001046:	2002      	movs	r0, #2
 8001048:	f000 f9d8 	bl	80013fc <setTimer>
			clear();
 800104c:	f000 f862 	bl	8001114 <clear>
		if(isButtonPressed(0) == 1){
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fb79 	bl	8000748 <isButtonPressed>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	d145      	bne.n	80010e8 <fsm_manual_run+0x17c>
			modeStatus = MODE4;
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <fsm_manual_run+0x188>)
 800105e:	220e      	movs	r2, #14
 8001060:	601a      	str	r2, [r3, #0]
			time_dur = GREEN_timer;
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <fsm_manual_run+0x1a4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a29      	ldr	r2, [pc, #164]	; (800110c <fsm_manual_run+0x1a0>)
 8001068:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 800106a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f9c4 	bl	80013fc <setTimer>
			setTimer(8,10);
 8001074:	210a      	movs	r1, #10
 8001076:	2008      	movs	r0, #8
 8001078:	f000 f9c0 	bl	80013fc <setTimer>
			setTimer(9,50);
 800107c:	2132      	movs	r1, #50	; 0x32
 800107e:	2009      	movs	r0, #9
 8001080:	f000 f9bc 	bl	80013fc <setTimer>
			counter = 0;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <fsm_manual_run+0x190>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
			clear();
 800108a:	f000 f843 	bl	8001114 <clear>
		break;
 800108e:	e02b      	b.n	80010e8 <fsm_manual_run+0x17c>
		mode4();
 8001090:	f7ff fed8 	bl	8000e44 <mode4>
		if(isButtonPressed(0) == 1 || timer_flag[0] == 1){
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fb57 	bl	8000748 <isButtonPressed>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d003      	beq.n	80010a8 <fsm_manual_run+0x13c>
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <fsm_manual_run+0x18c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d121      	bne.n	80010ec <fsm_manual_run+0x180>
			modeStatus = MODE1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <fsm_manual_run+0x188>)
 80010aa:	220b      	movs	r2, #11
 80010ac:	601a      	str	r2, [r3, #0]
			counter = 0;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <fsm_manual_run+0x190>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
			autoStatus1 = LED_INIT;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <fsm_manual_run+0x194>)
 80010b6:	2207      	movs	r2, #7
 80010b8:	601a      	str	r2, [r3, #0]
			autoStatus2 = LED_INIT;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <fsm_manual_run+0x198>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 80010c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f999 	bl	80013fc <setTimer>
			setTimer(1,10);
 80010ca:	210a      	movs	r1, #10
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f995 	bl	80013fc <setTimer>
			setTimer(2,50);
 80010d2:	2132      	movs	r1, #50	; 0x32
 80010d4:	2002      	movs	r0, #2
 80010d6:	f000 f991 	bl	80013fc <setTimer>
			clear();
 80010da:	f000 f81b 	bl	8001114 <clear>
		break;
 80010de:	e005      	b.n	80010ec <fsm_manual_run+0x180>
		break;
 80010e0:	bf00      	nop
 80010e2:	e004      	b.n	80010ee <fsm_manual_run+0x182>
		break;
 80010e4:	bf00      	nop
 80010e6:	e002      	b.n	80010ee <fsm_manual_run+0x182>
		break;
 80010e8:	bf00      	nop
 80010ea:	e000      	b.n	80010ee <fsm_manual_run+0x182>
		break;
 80010ec:	bf00      	nop
	}
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000040 	.word	0x20000040
 80010f8:	200000c4 	.word	0x200000c4
 80010fc:	20000098 	.word	0x20000098
 8001100:	20000044 	.word	0x20000044
 8001104:	20000048 	.word	0x20000048
 8001108:	20000050 	.word	0x20000050
 800110c:	20000094 	.word	0x20000094
 8001110:	20000054 	.word	0x20000054

08001114 <clear>:
int counter = 0;
int count1 = 1;
int count2 = 1;
int flag = 0;

void clear(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, a_Pin|b_Pin|c_Pin|d_Pin|e_Pin|f_Pin|g_Pin, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	f240 311f 	movw	r1, #799	; 0x31f
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <clear+0x28>)
 8001120:	f000 fd61 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	21e0      	movs	r1, #224	; 0xe0
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <clear+0x28>)
 800112a:	f000 fd5c 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	21e0      	movs	r1, #224	; 0xe0
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <clear+0x2c>)
 8001134:	f000 fd57 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010800 	.word	0x40010800
 8001140:	40010c00 	.word	0x40010c00

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f000 fa4c 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f838 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 f8be 	bl	80012d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001154:	f000 f870 	bl	8001238 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001158:	4817      	ldr	r0, [pc, #92]	; (80011b8 <main+0x74>)
 800115a:	f001 f9ad 	bl	80024b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1,10);
 800115e:	210a      	movs	r1, #10
 8001160:	2001      	movs	r0, #1
 8001162:	f000 f94b 	bl	80013fc <setTimer>
  setTimer(2,10);
 8001166:	210a      	movs	r1, #10
 8001168:	2002      	movs	r0, #2
 800116a:	f000 f947 	bl	80013fc <setTimer>
  setTimer(3,10);
 800116e:	210a      	movs	r1, #10
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f943 	bl	80013fc <setTimer>
  setTimer(4,10);
 8001176:	210a      	movs	r1, #10
 8001178:	2004      	movs	r0, #4
 800117a:	f000 f93f 	bl	80013fc <setTimer>
  setTimer(5,50);
 800117e:	2132      	movs	r1, #50	; 0x32
 8001180:	2005      	movs	r0, #5
 8001182:	f000 f93b 	bl	80013fc <setTimer>
  setTimer(6,10);
 8001186:	210a      	movs	r1, #10
 8001188:	2006      	movs	r0, #6
 800118a:	f000 f937 	bl	80013fc <setTimer>
  setTimer(7,50);
 800118e:	2132      	movs	r1, #50	; 0x32
 8001190:	2007      	movs	r0, #7
 8001192:	f000 f933 	bl	80013fc <setTimer>
  setTimer(8,10);
 8001196:	210a      	movs	r1, #10
 8001198:	2008      	movs	r0, #8
 800119a:	f000 f92f 	bl	80013fc <setTimer>
  setTimer(9,50);
 800119e:	2132      	movs	r1, #50	; 0x32
 80011a0:	2009      	movs	r0, #9
 80011a2:	f000 f92b 	bl	80013fc <setTimer>
  modeStatus = MODE1;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <main+0x78>)
 80011a8:	220b      	movs	r2, #11
 80011aa:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_auto_run();
 80011ac:	f7ff fc7c 	bl	8000aa8 <fsm_auto_run>
	  fsm_manual_run();
 80011b0:	f7ff fedc 	bl	8000f6c <fsm_manual_run>
	  fsm_auto_run();
 80011b4:	e7fa      	b.n	80011ac <main+0x68>
 80011b6:	bf00      	nop
 80011b8:	200000ec 	.word	0x200000ec
 80011bc:	20000040 	.word	0x20000040

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b090      	sub	sp, #64	; 0x40
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	2228      	movs	r2, #40	; 0x28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fd2a 	bl	8002c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ea:	2310      	movs	r3, #16
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd26 	bl	8001c48 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001202:	f000 f8f6 	bl	80013f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f000 ff92 	bl	8002148 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800122a:	f000 f8e2 	bl	80013f2 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM2_Init+0x94>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_TIM2_Init+0x94>)
 800125e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM2_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_TIM2_Init+0x94>)
 800126c:	2209      	movs	r2, #9
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_TIM2_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM2_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_TIM2_Init+0x94>)
 800127e:	f001 f8cb 	bl	8002418 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001288:	f000 f8b3 	bl	80013f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001290:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_TIM2_Init+0x94>)
 800129a:	f001 fa61 	bl	8002760 <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 f8a5 	bl	80013f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_TIM2_Init+0x94>)
 80012b6:	f001 fc29 	bl	8002b0c <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 f897 	bl	80013f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000ec 	.word	0x200000ec

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_GPIO_Init+0xb8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <MX_GPIO_Init+0xb8>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_GPIO_Init+0xb8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_GPIO_Init+0xb8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_GPIO_Init+0xb8>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_GPIO_Init+0xb8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a_Pin|b_Pin|c_Pin|d_Pin
 8001314:	2200      	movs	r2, #0
 8001316:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800131a:	481c      	ldr	r0, [pc, #112]	; (800138c <MX_GPIO_Init+0xbc>)
 800131c:	f000 fc63 	bl	8001be6 <HAL_GPIO_WritePin>
                          |e_Pin|LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
                          |f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN2_Pin|EN3_Pin|LED_RED2_Pin|LED_YELLOW2_Pin
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8001326:	481a      	ldr	r0, [pc, #104]	; (8001390 <MX_GPIO_Init+0xc0>)
 8001328:	f000 fc5d 	bl	8001be6 <HAL_GPIO_WritePin>
                          |LED_GREEN2_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin
                           f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 800132c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001330:	60bb      	str	r3, [r7, #8]
                          |e_Pin|LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
                          |f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2302      	movs	r3, #2
 800133c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <MX_GPIO_Init+0xbc>)
 8001346:	f000 fabd 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800134a:	2307      	movs	r3, #7
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001352:	2301      	movs	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_GPIO_Init+0xc0>)
 800135e:	f000 fab1 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN2_Pin EN3_Pin LED_RED2_Pin LED_YELLOW2_Pin
                           LED_GREEN2_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|EN3_Pin|LED_RED2_Pin|LED_YELLOW2_Pin
 8001362:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8001366:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN2_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_GPIO_Init+0xc0>)
 800137c:	f000 faa2 	bl	80018c4 <HAL_GPIO_Init>

}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00

08001394 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	timerRun(0);
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f845 	bl	800142c <timerRun>
	timerRun(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 f842 	bl	800142c <timerRun>
	timerRun(2);
 80013a8:	2002      	movs	r0, #2
 80013aa:	f000 f83f 	bl	800142c <timerRun>
	timerRun(3);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f000 f83c 	bl	800142c <timerRun>
	timerRun(4);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f000 f839 	bl	800142c <timerRun>
	timerRun(5);
 80013ba:	2005      	movs	r0, #5
 80013bc:	f000 f836 	bl	800142c <timerRun>
	timerRun(6);
 80013c0:	2006      	movs	r0, #6
 80013c2:	f000 f833 	bl	800142c <timerRun>
	timerRun(7);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 f830 	bl	800142c <timerRun>
	timerRun(8);
 80013cc:	2008      	movs	r0, #8
 80013ce:	f000 f82d 	bl	800142c <timerRun>
	timerRun(9);
 80013d2:	2009      	movs	r0, #9
 80013d4:	f000 f82a 	bl	800142c <timerRun>
	getKeyInput(0);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff f9df 	bl	800079c <getKeyInput>
	getKeyInput(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff f9dc 	bl	800079c <getKeyInput>
	getKeyInput(2);
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff f9d9 	bl	800079c <getKeyInput>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f6:	b672      	cpsid	i
}
 80013f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fa:	e7fe      	b.n	80013fa <Error_Handler+0x8>

080013fc <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int timer_flag[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void setTimer(int timer_index, int duration){
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	timer_counter[timer_index] = duration;
 8001406:	4907      	ldr	r1, [pc, #28]	; (8001424 <setTimer+0x28>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_index] = 0;
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <setTimer+0x2c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2100      	movs	r1, #0
 8001416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	2000009c 	.word	0x2000009c
 8001428:	200000c4 	.word	0x200000c4

0800142c <timerRun>:

void timerRun(int timer_index){
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if(timer_counter[timer_index] > 0){
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <timerRun+0x48>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dd13      	ble.n	8001468 <timerRun+0x3c>
		timer_counter[timer_index]--;
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <timerRun+0x48>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <timerRun+0x48>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timer_index] <= 0){
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <timerRun+0x48>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	2b00      	cmp	r3, #0
 800145c:	dc04      	bgt.n	8001468 <timerRun+0x3c>
			timer_flag[timer_index] = 1;
 800145e:	4a06      	ldr	r2, [pc, #24]	; (8001478 <timerRun+0x4c>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2101      	movs	r1, #1
 8001464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2000009c 	.word	0x2000009c
 8001478:	200000c4 	.word	0x200000c4

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_MspInit+0x5c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_MspInit+0x5c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_MspInit+0x5c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_MspInit+0x60>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_MspInit+0x60>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d113      	bne.n	800151a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	201c      	movs	r0, #28
 8001510:	f000 f9a1 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001514:	201c      	movs	r0, #28
 8001516:	f000 f9ba 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156e:	f000 f87f 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f000 ffe7 	bl	8002550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000ec 	.word	0x200000ec

0800158c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015be:	f7ff ffe5 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f001 fb0d 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c6:	f7ff fdbd 	bl	8001144 <main>
  bx lr
 80015ca:	4770      	bx	lr
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015d4:	08002c78 	.word	0x08002c78
  ldr r2, =_sbss
 80015d8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015dc:	20000138 	.word	0x20000138

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x28>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x28>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f923 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff ff3c 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f93b 	bl	80018aa <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f903 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000060 	.word	0x20000060
 8001668:	20000068 	.word	0x20000068
 800166c:	20000064 	.word	0x20000064

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x1c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_IncTick+0x20>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_IncTick+0x20>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000068 	.word	0x20000068
 8001690:	20000134 	.word	0x20000134

08001694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_GetTick+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000134 	.word	0x20000134

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4906      	ldr	r1, [pc, #24]	; (8001740 <__NVIC_EnableIRQ+0x34>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff90 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff2d 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff42 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff35 	bl	800170c <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b08b      	sub	sp, #44	; 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e148      	b.n	8001b6a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d8:	2201      	movs	r2, #1
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8137 	bne.w	8001b64 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4aa3      	ldr	r2, [pc, #652]	; (8001b88 <HAL_GPIO_Init+0x2c4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d05e      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001900:	4aa1      	ldr	r2, [pc, #644]	; (8001b88 <HAL_GPIO_Init+0x2c4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d875      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 8001906:	4aa1      	ldr	r2, [pc, #644]	; (8001b8c <HAL_GPIO_Init+0x2c8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d058      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 800190c:	4a9f      	ldr	r2, [pc, #636]	; (8001b8c <HAL_GPIO_Init+0x2c8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d86f      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 8001912:	4a9f      	ldr	r2, [pc, #636]	; (8001b90 <HAL_GPIO_Init+0x2cc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d052      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001918:	4a9d      	ldr	r2, [pc, #628]	; (8001b90 <HAL_GPIO_Init+0x2cc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d869      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 800191e:	4a9d      	ldr	r2, [pc, #628]	; (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d04c      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001924:	4a9b      	ldr	r2, [pc, #620]	; (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d863      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 800192a:	4a9b      	ldr	r2, [pc, #620]	; (8001b98 <HAL_GPIO_Init+0x2d4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d046      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001930:	4a99      	ldr	r2, [pc, #612]	; (8001b98 <HAL_GPIO_Init+0x2d4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d85d      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d82a      	bhi.n	8001990 <HAL_GPIO_Init+0xcc>
 800193a:	2b12      	cmp	r3, #18
 800193c:	d859      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <HAL_GPIO_Init+0x80>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	080019bf 	.word	0x080019bf
 8001948:	08001999 	.word	0x08001999
 800194c:	080019ab 	.word	0x080019ab
 8001950:	080019ed 	.word	0x080019ed
 8001954:	080019f3 	.word	0x080019f3
 8001958:	080019f3 	.word	0x080019f3
 800195c:	080019f3 	.word	0x080019f3
 8001960:	080019f3 	.word	0x080019f3
 8001964:	080019f3 	.word	0x080019f3
 8001968:	080019f3 	.word	0x080019f3
 800196c:	080019f3 	.word	0x080019f3
 8001970:	080019f3 	.word	0x080019f3
 8001974:	080019f3 	.word	0x080019f3
 8001978:	080019f3 	.word	0x080019f3
 800197c:	080019f3 	.word	0x080019f3
 8001980:	080019f3 	.word	0x080019f3
 8001984:	080019f3 	.word	0x080019f3
 8001988:	080019a1 	.word	0x080019a1
 800198c:	080019b5 	.word	0x080019b5
 8001990:	4a82      	ldr	r2, [pc, #520]	; (8001b9c <HAL_GPIO_Init+0x2d8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001996:	e02c      	b.n	80019f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e029      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	3304      	adds	r3, #4
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e024      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	3308      	adds	r3, #8
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e01f      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	330c      	adds	r3, #12
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e01a      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c6:	2304      	movs	r3, #4
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e013      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	611a      	str	r2, [r3, #16]
          break;
 80019de:	e009      	b.n	80019f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	615a      	str	r2, [r3, #20]
          break;
 80019ea:	e003      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e000      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          break;
 80019f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d801      	bhi.n	80019fe <HAL_GPIO_Init+0x13a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	e001      	b.n	8001a02 <HAL_GPIO_Init+0x13e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3304      	adds	r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2bff      	cmp	r3, #255	; 0xff
 8001a08:	d802      	bhi.n	8001a10 <HAL_GPIO_Init+0x14c>
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x152>
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	3b08      	subs	r3, #8
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8090 	beq.w	8001b64 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a44:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <HAL_GPIO_Init+0x2dc>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a55      	ldr	r2, [pc, #340]	; (8001ba0 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_GPIO_Init+0x2dc>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a5c:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <HAL_GPIO_Init+0x2e0>)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <HAL_GPIO_Init+0x2e4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x2e8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x1dc>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <HAL_GPIO_Init+0x2ec>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_Init+0x1d8>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e004      	b.n	8001aa6 <HAL_GPIO_Init+0x1e2>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e002      	b.n	8001aa6 <HAL_GPIO_Init+0x1e2>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_GPIO_Init+0x1e2>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab6:	493b      	ldr	r1, [pc, #236]	; (8001ba4 <HAL_GPIO_Init+0x2e0>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4933      	ldr	r1, [pc, #204]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	492d      	ldr	r1, [pc, #180]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4929      	ldr	r1, [pc, #164]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4923      	ldr	r1, [pc, #140]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	491f      	ldr	r1, [pc, #124]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4919      	ldr	r1, [pc, #100]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4915      	ldr	r1, [pc, #84]	; (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f47f aeaf 	bne.w	80018d8 <HAL_GPIO_Init+0x14>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	372c      	adds	r7, #44	; 0x2c
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	10320000 	.word	0x10320000
 8001b8c:	10310000 	.word	0x10310000
 8001b90:	10220000 	.word	0x10220000
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10120000 	.word	0x10120000
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf6:	787b      	ldrb	r3, [r7, #1]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c02:	e003      	b.n	8001c0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	400b      	ands	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e26c      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c74:	4b8f      	ldr	r3, [pc, #572]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d06c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x12c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d168      	bne.n	8001d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e246      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x76>
 8001cb0:	4b80      	ldr	r3, [pc, #512]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7f      	ldr	r2, [pc, #508]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b7b      	ldr	r3, [pc, #492]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7a      	ldr	r2, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b78      	ldr	r3, [pc, #480]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a77      	ldr	r2, [pc, #476]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0xbc>
 8001cea:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a71      	ldr	r2, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fcb6 	bl	8001694 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fcb2 	bl	8001694 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1fa      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe4>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fca2 	bl	8001694 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fc9e 	bl	8001694 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1e6      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x10c>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1ba      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4939      	ldr	r1, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fc57 	bl	8001694 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fc53 	bl	8001694 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e19b      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4927      	ldr	r1, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fc36 	bl	8001694 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fc32 	bl	8001694 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e17a      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03a      	beq.n	8001ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fc16 	bl	8001694 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fc12 	bl	8001694 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e15a      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f000 faa6 	bl	80023dc <RCC_Delay>
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fbfc 	bl	8001694 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fbf8 	bl	8001694 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e140      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	42420000 	.word	0x42420000
 8001ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b9e      	ldr	r3, [pc, #632]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e9      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a6 	beq.w	8002026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b97      	ldr	r3, [pc, #604]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b94      	ldr	r3, [pc, #592]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a93      	ldr	r2, [pc, #588]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b91      	ldr	r3, [pc, #580]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b8e      	ldr	r3, [pc, #568]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a8a      	ldr	r2, [pc, #552]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fbb9 	bl	8001694 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7ff fbb5 	bl	8001694 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0fd      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b73      	ldr	r3, [pc, #460]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a72      	ldr	r2, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x356>
 8001f84:	4b6d      	ldr	r3, [pc, #436]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a6c      	ldr	r2, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a69      	ldr	r2, [pc, #420]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a66      	ldr	r2, [pc, #408]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a63      	ldr	r2, [pc, #396]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fb69 	bl	8001694 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff fb65 	bl	8001694 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0ab      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb53 	bl	8001694 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fb4f 	bl	8001694 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e095      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b48      	ldr	r3, [pc, #288]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8081 	beq.w	8002132 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d061      	beq.n	8002100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d146      	bne.n	80020d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fb23 	bl	8001694 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff fb1f 	bl	8001694 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e067      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d108      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	492d      	ldr	r1, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a19      	ldr	r1, [r3, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	430b      	orrs	r3, r1
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff faf3 	bl	8001694 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff faef 	bl	8001694 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e037      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
 80020d0:	e02f      	b.n	8002132 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fadc 	bl	8001694 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fad8 	bl	8001694 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e020      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x498>
 80020fe:	e018      	b.n	8002132 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e013      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	42420060 	.word	0x42420060

08002148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4965      	ldr	r1, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d040      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e073      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff fa2c 	bl	8001694 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff fa28 	bl	8001694 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e053      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d210      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1cc>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f98a 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	08002c60 	.word	0x08002c60
 8002314:	20000060 	.word	0x20000060
 8002318:	20000064 	.word	0x20000064

0800231c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b490      	push	{r4, r7}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002324:	1d3c      	adds	r4, r7, #4
 8002326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800232c:	f240 2301 	movw	r3, #513	; 0x201
 8002330:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d002      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x46>
 800235a:	e02d      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	e02d      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800236e:	4413      	add	r3, r2
 8002370:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002374:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c5b      	lsrs	r3, r3, #17
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800238e:	4413      	add	r3, r2
 8002390:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002394:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	fb02 f203 	mul.w	r2, r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e004      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	623b      	str	r3, [r7, #32]
      break;
 80023b6:	e002      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ba:	623b      	str	r3, [r7, #32]
      break;
 80023bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023be:	6a3b      	ldr	r3, [r7, #32]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc90      	pop	{r4, r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	08002c50 	.word	0x08002c50
 80023d0:	40021000 	.word	0x40021000
 80023d4:	007a1200 	.word	0x007a1200
 80023d8:	003d0900 	.word	0x003d0900

080023dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <RCC_Delay+0x34>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <RCC_Delay+0x38>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a5b      	lsrs	r3, r3, #9
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f8:	bf00      	nop
  }
  while (Delay --);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	60fa      	str	r2, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <RCC_Delay+0x1c>
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000060 	.word	0x20000060
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff f84e 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 fa6a 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e035      	b.n	800253c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_TIM_Base_Start_IT+0x90>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_TIM_Base_Start_IT+0x4e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d004      	beq.n	8002506 <HAL_TIM_Base_Start_IT+0x4e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <HAL_TIM_Base_Start_IT+0x94>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d111      	bne.n	800252a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d010      	beq.n	800253a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002528:	e007      	b.n	800253a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400

08002550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0202 	mvn.w	r2, #2
 800257c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9b1 	bl	80028fa <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f9a4 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f9b3 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0204 	mvn.w	r2, #4
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f987 	bl	80028fa <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f97a 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f989 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b08      	cmp	r3, #8
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0208 	mvn.w	r2, #8
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f95d 	bl	80028fa <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f950 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f95f 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b10      	cmp	r3, #16
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0210 	mvn.w	r2, #16
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2208      	movs	r2, #8
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f933 	bl	80028fa <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f926 	bl	80028e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f935 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0201 	mvn.w	r2, #1
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fe60 	bl	8001394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d107      	bne.n	8002700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa67 	bl	8002bce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d10e      	bne.n	800272c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d107      	bne.n	800272c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8f9 	bl	800291e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b20      	cmp	r3, #32
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b20      	cmp	r3, #32
 8002746:	d107      	bne.n	8002758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0220 	mvn.w	r2, #32
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa32 	bl	8002bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_TIM_ConfigClockSource+0x18>
 8002774:	2302      	movs	r3, #2
 8002776:	e0b3      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x180>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b0:	d03e      	beq.n	8002830 <HAL_TIM_ConfigClockSource+0xd0>
 80027b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b6:	f200 8087 	bhi.w	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	f000 8085 	beq.w	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c6:	d87f      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b70      	cmp	r3, #112	; 0x70
 80027ca:	d01a      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0xa2>
 80027cc:	2b70      	cmp	r3, #112	; 0x70
 80027ce:	d87b      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b60      	cmp	r3, #96	; 0x60
 80027d2:	d050      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x116>
 80027d4:	2b60      	cmp	r3, #96	; 0x60
 80027d6:	d877      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027d8:	2b50      	cmp	r3, #80	; 0x50
 80027da:	d03c      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0xf6>
 80027dc:	2b50      	cmp	r3, #80	; 0x50
 80027de:	d873      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d058      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x136>
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d86f      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027e8:	2b30      	cmp	r3, #48	; 0x30
 80027ea:	d064      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x156>
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	d86b      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d060      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x156>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d867      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d05c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x156>
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d05a      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002800:	e062      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f000 f95c 	bl	8002ace <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002824:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	609a      	str	r2, [r3, #8]
      break;
 800282e:	e04e      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f000 f945 	bl	8002ace <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002852:	609a      	str	r2, [r3, #8]
      break;
 8002854:	e03b      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	461a      	mov	r2, r3
 8002864:	f000 f8bc 	bl	80029e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2150      	movs	r1, #80	; 0x50
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f913 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 8002874:	e02b      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	f000 f8da 	bl	8002a3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2160      	movs	r1, #96	; 0x60
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f903 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 8002894:	e01b      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f89c 	bl	80029e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f8f3 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 80028b4:	e00b      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f000 f8ea 	bl	8002a9a <TIM_ITRx_SetConfig>
        break;
 80028c6:	e002      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028c8:	bf00      	nop
 80028ca:	e000      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <TIM_Base_SetConfig+0xa8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0x28>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x28>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <TIM_Base_SetConfig+0xac>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <TIM_Base_SetConfig+0xa8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_Base_SetConfig+0x52>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d003      	beq.n	8002982 <TIM_Base_SetConfig+0x52>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a17      	ldr	r2, [pc, #92]	; (80029dc <TIM_Base_SetConfig+0xac>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <TIM_Base_SetConfig+0xa8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d103      	bne.n	80029c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	615a      	str	r2, [r3, #20]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400

080029e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 030a 	bic.w	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 0210 	bic.w	r2, r3, #16
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	031b      	lsls	r3, r3, #12
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	621a      	str	r2, [r3, #32]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 0307 	orr.w	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	021a      	lsls	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e041      	b.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d004      	beq.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10c      	bne.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400

08002bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	2600      	movs	r6, #0
 8002be4:	4d0c      	ldr	r5, [pc, #48]	; (8002c18 <__libc_init_array+0x38>)
 8002be6:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be8:	1b64      	subs	r4, r4, r5
 8002bea:	10a4      	asrs	r4, r4, #2
 8002bec:	42a6      	cmp	r6, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	f000 f822 	bl	8002c38 <_init>
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	4d0a      	ldr	r5, [pc, #40]	; (8002c20 <__libc_init_array+0x40>)
 8002bf8:	4c0a      	ldr	r4, [pc, #40]	; (8002c24 <__libc_init_array+0x44>)
 8002bfa:	1b64      	subs	r4, r4, r5
 8002bfc:	10a4      	asrs	r4, r4, #2
 8002bfe:	42a6      	cmp	r6, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c08:	4798      	blx	r3
 8002c0a:	3601      	adds	r6, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c12:	4798      	blx	r3
 8002c14:	3601      	adds	r6, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08002c70 	.word	0x08002c70
 8002c1c:	08002c70 	.word	0x08002c70
 8002c20:	08002c70 	.word	0x08002c70
 8002c24:	08002c74 	.word	0x08002c74

08002c28 <memset>:
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4402      	add	r2, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
